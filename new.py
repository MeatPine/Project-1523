import asyncio
import logging
import sqlite3
import time
import os

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

import requests
from mistralai import Mistral
from langchain_mistralai import ChatMistralAI, MistralAIEmbeddings
from langchain.chains.combine_documents import create_stuff_documents_chain
from langchain.chains import create_retrieval_chain
from langchain_chroma import Chroma
from langgraph.checkpoint.memory import MemorySaver
from langchain_core.prompts import ChatPromptTemplate
from langchain_text_splitters import RecursiveCharacterTextSplitter
from langchain_community.document_loaders import Docx2txtLoader
from langgraph.graph import START, MessagesState, StateGraph
from langchain_core.messages import HumanMessage, SystemMessage

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª—é—á –¥–ª—è Mistral
os.environ["MISTRAL_API_KEY"] = "XSFzvyw9LNYEjKYPFYFhYCzerqjeAr7Y"
llm = ChatMistralAI(model="mistral-small-latest")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É (–µ—Å–ª–∏ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–∞)
conn = sqlite3.connect("users_data.db")
cursor = conn.cursor()
cursor.execute("""
    CREATE TABLE IF NOT EXISTS user_progress (
        user_id INTEGER PRIMARY KEY,
        progress INTEGER DEFAULT 0,
        story TEXT DEFAULT '',
        thread_id TEXT DEFAULT ''
    )
""")
conn.commit()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class Reg(StatesGroup):
    start = State()    # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
    dialog = State()   # –ò–≥—Ä–æ–≤–æ–π –¥–∏–∞–ª–æ–≥ (–∏–≥—Ä–∞ –∏–¥—ë—Ç)
    cont = State()     # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É
    new = State()      # –ù–æ–≤–∞—è –∏–≥—Ä–∞ (–æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π
start_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É")],
        # [KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É")],
        [KeyboardButton(text="–ù–æ–≤–∞—è –∏–≥—Ä–∞")]
    ],
    resize_keyboard=True
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
BOT_TOKEN = '7602719591:AAER_dkEQXD9x0O4RNnya5nzWss3RAnPqGE'
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å—é–∂–µ—Ç–∞, —Ä–∞–∑–±–∏–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞, —Å–æ–∑–¥–∞–Ω–∏–µ retriever
loader = Docx2txtLoader("story.docx")
data = loader.load()
embeddings = MistralAIEmbeddings(model="mistral-embed")
text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=200)
splits = text_splitter.split_documents(data)
vectorstore = Chroma.from_documents(documents=splits, embedding=embeddings)
retriever = vectorstore.as_retriever()  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è

# –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–º {context}
system_prompt = (
    "–¢—ã —á–∞—Ç-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–µ–¥–µ—Ç –∏–≥—Ä—É –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º Crystals of Fate. "
    "–ò–≥—Ä–∞ –≤–µ–¥–µ—Ç—Å—è –æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ –∏–º–µ–Ω–∏ –ö–∞–π. "
    "–ü–æ —Å—é–∂–µ—Ç—É, –ö–∞–π –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Ü–µ–Ω—Ç—Ä–µ –±–æ—Ä—å–±—ã –º–µ–∂–¥—É –º–∞–≥–∏—á–µ—Å–∫–∏–º –û—Ä–¥–µ–Ω–æ–º –°–≤–µ—Ç–∞, –≤—ã—Å–æ–∫–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω—ã–º–∏ –¢–µ—Ö–Ω–æ–∫—Ä–∞—Ç–∞–º–∏ –∏ —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ò–∑–≥–Ω–∞–Ω–Ω–∏–∫–∞–º–∏. "
    "–°–æ–≥–ª–∞—Å–Ω–æ –ª–æ—Ä—É –∏–≥—Ä—ã, –∫–∞–π –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä–µ–≤–Ω–∏–π –ö—Ä–∏—Å—Ç–∞–ª–ª, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫, –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–ª–∏ —Ä–∞–∑—Ä—É—à–∏—Ç—å –æ–∫–æ–≤—ã –≤–ª–∞—Å—Ç–∏, –ø–æ–∑–≤–æ–ª—è—è –º–∏—Ä—É —Å–∞–º–æ–º—É —Ä–µ—à–∞—Ç—å —Å–≤–æ—é —Å—É–¥—å–±—É. "
    "–¢—ã –¥–æ–ª–∂–µ–Ω –≤–µ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥ –æ—Ç –ª–∏—Ü–∞ –≤–µ–¥—É—â–µ–≥–æ –∏–≥—Ä—ã, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –æ—Ç–≤–µ—Ç—ã –∏–≥—Ä–æ–∫–∞, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∏–≥—Ä–æ–π. "
    "–í –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã, –∫–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ –Ω–∞–ø–∏—à–µ—Ç '–Ω–∞—á–∞—Ç—å –∏–≥—Ä—É' –∏–ª–∏ '–ù–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è', –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–ø–∏—Å–∞–Ω –º–∏—Ä –∏ —Å—é–∂–µ—Ç –∏–≥—Ä—ã, –Ω–∞—á–Ω–∏ –∏–≥—Ä—É —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞, –ø—Ä–∏ —ç—Ç–æ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –¥—Ä—É–≥–æ–µ –Ω–∞—á–∞–ª–æ. "
    "–ù–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ –∏–≥—Ä–æ–∫–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–π —Å—é–∂–µ—Ç –¥–∞–ª—å—à–µ, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö –∏–≥—Ä–æ–∫–∞, –Ω–µ –æ—Ç—Å—Ç—É–ø–∞—è –æ—Ç —Å—é–∂–µ—Ç–∞. "
    "–ï—Å–ª–∏ —Ç–µ–±–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ '–Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∏–≥—Ä', —Ç–æ –æ—Ç–≤–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —É –Ω–µ–≥–æ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∏–≥—Ä, –∏ —á—Ç–æ –æ–Ω –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É. "
    "–í –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å—é–∂–µ—Ç–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–π –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞–∑–≤–∏—Ç–∏—è, –Ω—É–º–µ—Ä—É—è –∏—Ö, —Å–ø—Ä–∞—à–∏–≤–∞—è: '–ö–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Ç—ã —Å–¥–µ–ª–∞–µ—à—å?'. "
    "–¢–∞–∫–∂–µ —Ç–µ–±–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–≥—Ä–æ–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–π –µ–≥–æ –≤ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –∏ –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ 15, —Ç–æ –∑–∞–∫–æ–Ω—á–∏ –∏—Å—Ç–æ—Ä–∏—é, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–≤ –µ—ë —Ñ–∏–Ω–∞–ª, –ø—Ä–∏—á–µ–º –≤ —ç—Ç–æ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö, –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤. \n\n{context}"
)

prompt = ChatPromptTemplate.from_messages(
    [
        ("system", system_prompt),
        ("human", "{input}"),
    ]
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–ø–æ—á–µ–∫ LangChain (–¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞)
question_answer_chain = create_stuff_documents_chain(llm, prompt)
rag_chain = create_retrieval_chain(retriever, question_answer_chain)

workflow = StateGraph(state_schema=MessagesState)
def call_model(state: MessagesState):
    response = llm.invoke(state["messages"])
    return {"messages": response}
workflow.add_edge(START, "model")
workflow.add_node("model", call_model)

memory = MemorySaver()
app = workflow.compile(checkpointer=memory)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
def split_text(text, chunk_size=4096):
    return [text[i:i+chunk_size] for i in range(0, len(text), chunk_size)]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def start_command(message: Message, state: FSMContext):
    await state.set_state(Reg.start)
    await message.reply(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"
        "üîπ '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É' ‚Äì –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É.\n"
        "üîπ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É' ‚Äì –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å.\n"
        "üîπ '–ù–æ–≤–∞—è –∏–≥—Ä–∞' ‚Äì —Å—Ç–µ—Ä–µ—Ç—å —Å—Ç–∞—Ä—É—é –∏—Å—Ç–æ—Ä–∏—é –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
        reply_markup=start_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è (Reg.start)
@dp.message(Reg.start)
async def start_story(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É":
        # –ü—Ä–∏ –≤—ã–±–æ—Ä–µ "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É" —É–¥–∞–ª—è–µ–º –ª—é–±—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("DELETE FROM user_progress WHERE user_id = ?", (user_id,))
        conn.commit()
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π thread_id
        new_thread_id = f"{message.chat.id}_{int(time.time())}"
        await state.update_data(thread_id=new_thread_id)
        # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        cursor.execute("INSERT INTO user_progress (user_id, progress, story, thread_id) VALUES (?, 1, '', ?)",
                       (user_id, new_thread_id))
        conn.commit()
        await state.set_state(Reg.dialog)
        await handle_dialog(message, state)
        
    elif message.text == "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É":
        cursor.execute("SELECT thread_id, progress, story FROM user_progress WHERE user_id = ?", (user_id,))
        row = cursor.fetchone()
        if row is None or row[2] == "":
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∏–≥—Ä. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É!", reply_markup=start_keyboard)
            await state.set_state(Reg.start)
        else:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç (story)
            await state.update_data(thread_id=row[0], progress=row[1], story=row[2])
            await message.answer("üìú –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–≥—Ä—É, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            await state.set_state(Reg.dialog)
            # –ù–µ –≤—ã–∑—ã–≤–∞–µ–º handle_dialog —Å—Ä–∞–∑—É, –∂–¥—ë–º –Ω–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    elif message.text == "–ù–æ–≤–∞—è –∏–≥—Ä–∞":
        cursor.execute("DELETE FROM user_progress WHERE user_id = ?", (user_id,))
        conn.commit()
        await message.answer("üîÑ –í–∞—à–∞ —Å—Ç–∞—Ä–∞—è –∏—Å—Ç–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É!", reply_markup=start_keyboard)
        await state.set_state(Reg.start)

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ (Reg.dialog)
@dp.message(Reg.dialog)
async def handle_dialog(message: Message, state: FSMContext):
    global retriever  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ retriever –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ñ—É–Ω–∫—Ü–∏–∏
    user_id = message.from_user.id
    data = await state.get_data()
    thread_id = data.get("thread_id", str(message.chat.id))
    saved_story = data.get("story", "")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ —Ç–µ–∫—Å—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è
    retrieved_docs = retriever.invoke(message.text)
    context = "\n".join([doc.page_content for doc in retrieved_docs])
    formatted_system_prompt = system_prompt.format(context=context)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è LLM:
    cursor.execute("SELECT progress, story FROM user_progress WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    if row is None or row[0] == 1:
        messages_chain = [
            SystemMessage(content=formatted_system_prompt),
            HumanMessage(content=message.text)
        ]
    else:
        # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ä–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π)
        messages_chain = [
            HumanMessage(content=message.text)
        ]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    if row is None:
        progress = 1
    else:
        progress = row[0] + 1
    cursor.execute("UPDATE user_progress SET progress = ? WHERE user_id = ?", (progress, user_id))
    conn.commit()
    
    config = {"configurable": {"thread_id": thread_id, "progress": progress}}
    time.sleep(2)
    
    results = app.invoke({"messages": messages_chain}, config)
    bot_response = results["messages"][-1].content
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
    cursor.execute("UPDATE user_progress SET story = ? WHERE user_id = ?", (bot_response, user_id))
    conn.commit()
    await state.update_data(story=bot_response)
    
    await message.answer(bot_response)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–≥—Ä—ã (—Å–æ—Å—Ç–æ—è–Ω–∏–µ Reg.cont) ‚Äì –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
@dp.message(Reg.cont)
async def handle_continue(message: Message, state: FSMContext):
    user_id = message.from_user.id
    cursor.execute("SELECT thread_id, progress, story FROM user_progress WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    if row is None or row[2] == "":
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∏–≥—Ä. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é!", reply_markup=start_keyboard)
        await state.set_state(Reg.start)
    else:
        await state.update_data(thread_id=row[0], progress=row[1], story=row[2])
        await message.answer(f"üìú –í–∞—à–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è:\n{row[2]}\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–≥—Ä—É!")
        await state.set_state(Reg.dialog)
        await handle_dialog(message, state)

async def main():
    logging.info("Starting bot...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
