import asyncio
import logging
import sqlite3
import time
import os
import re
import httpx
from datetime import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message, ReplyKeyboardRemove
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from mistralai import Mistral
from langchain_mistralai import ChatMistralAI, MistralAIEmbeddings
from langchain.chains.combine_documents import create_stuff_documents_chain
from langchain.chains import create_retrieval_chain
from langchain_chroma import Chroma
from langgraph.checkpoint.memory import MemorySaver
from langchain_core.prompts import ChatPromptTemplate
from langchain_text_splitters import RecursiveCharacterTextSplitter
from langchain_community.document_loaders import Docx2txtLoader
from langgraph.graph import START, MessagesState, StateGraph
from langchain_core.messages import HumanMessage, SystemMessage

os.environ["MISTRAL_API_KEY"] = "XSFzvyw9LNYEjKYPFYFhYCzerqjeAr7Y"
BOT_TOKEN = '7602719591:AAER_dkEQXD9x0O4RNnya5nzWss3RAnPqGE'
RATE_LIMIT_DELAY = 3.0
MAX_RETRIES = 3

class SafeMistralAI(ChatMistralAI):
    _timestamps = {}
    
    async def safe_invoke(self, messages, retries=MAX_RETRIES):
        model_id = f"{self.model}-{id(self)}"
        if model_id in self._timestamps:
            elapsed = (datetime.now() - self._timestamps[model_id]).total_seconds()
            if elapsed < RATE_LIMIT_DELAY:
                await asyncio.sleep(RATE_LIMIT_DELAY - elapsed)
        
        try:
            self._timestamps[model_id] = datetime.now()
            return self.invoke(messages)
        except httpx.HTTPStatusError as e:
            if e.response.status_code == 429 and retries > 0:
                wait_time = 5 * (MAX_RETRIES - retries + 1)
                logging.warning(f"Rate limit exceeded. Waiting {wait_time} seconds...")
                await asyncio.sleep(wait_time)
                return await self.safe_invoke(messages, retries - 1)
            raise
        except Exception as e:
            logging.error(f"Error in Mistral API: {str(e)}")
            raise

llm = SafeMistralAI(model="mistral-small-latest")

conn = sqlite3.connect("users_data.db")
cursor = conn.cursor()
cursor.execute("""
    CREATE TABLE IF NOT EXISTS user_progress (
        user_id INTEGER PRIMARY KEY,
        progress INTEGER DEFAULT 0,
        story TEXT DEFAULT '',
        thread_id TEXT DEFAULT '',
        options TEXT DEFAULT '[]'
    )
""")
conn.commit()

class Reg(StatesGroup):
    start = State()
    dialog = State()
    custom_choice = State()
    cont = State()
    new = State()

start_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ú® –ù–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç ‚úÖ")],
        [KeyboardButton(text="üìú –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚ñ∂Ô∏è")], 
        [KeyboardButton(text="üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞ üåç")]
    ],
    resize_keyboard=True,
    input_field_placeholder="üéÆ –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ..."
)

options_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="1-—ã–π –≤–∞—Ä–∏–∞–Ω—Ç")],
        [KeyboardButton(text="2-–æ–π –≤–∞—Ä–∏–∞–Ω—Ç")],
        [KeyboardButton(text="3-–∏–π –≤–∞—Ä–∏–∞–Ω—Ç")],
        [KeyboardButton(text="üé≠ –î—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç")]
    ],
    resize_keyboard=True,
    input_field_placeholder="üé≤ –í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç..."
)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

logging.basicConfig(level=logging.INFO)

loader = Docx2txtLoader("story.docx")
data = loader.load()
embeddings = MistralAIEmbeddings(model="mistral-embed")
text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=200)
splits = text_splitter.split_documents(data)
vectorstore = Chroma.from_documents(documents=splits, embedding=embeddings)
retriever = vectorstore.as_retriever()

system_prompt = (
    "–¢—ã —á–∞—Ç-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–µ–¥–µ—Ç –∏–≥—Ä—É –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º Crystals of Fate. "
    "–ò–≥—Ä–∞ –≤–µ–¥–µ—Ç—Å—è –æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ –∏–º–µ–Ω–∏ –ö–∞–π. "
    "–ü–æ —Å—é–∂–µ—Ç—É, –ö–∞–π –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Ü–µ–Ω—Ç—Ä–µ –±–æ—Ä—å–±—ã –º–µ–∂–¥—É –º–∞–≥–∏—á–µ—Å–∫–∏–º –û—Ä–¥–µ–Ω–æ–º –°–≤–µ—Ç–∞, –≤—ã—Å–æ–∫–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω—ã–º–∏ –¢–µ—Ö–Ω–æ–∫—Ä–∞—Ç–∞–º–∏ –∏ —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ò–∑–≥–Ω–∞–Ω–Ω–∏–∫–∞–º–∏. "
    "–°–æ–≥–ª–∞—Å–Ω–æ –ª–æ—Ä—É –∏–≥—Ä—ã, –∫–∞–π –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä–µ–≤–Ω–∏–π –ö—Ä–∏—Å—Ç–∞–ª–ª, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫, –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–ª–∏ —Ä–∞–∑—Ä—É—à–∏—Ç—å –æ–∫–æ–≤—ã –≤–ª–∞—Å—Ç–∏, –ø–æ–∑–≤–æ–ª—è—è –º–∏—Ä—É —Å–∞–º–æ–º—É —Ä–µ—à–∞—Ç—å —Å–≤–æ—é —Å—É–¥—å–±—É. "
    "–¢—ã –¥–æ–ª–∂–µ–Ω –≤–µ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥ –æ—Ç –ª–∏—Ü–∞ –≤–µ–¥—É—â–µ–≥–æ –∏–≥—Ä—ã, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –æ—Ç–≤–µ—Ç—ã –∏–≥—Ä–æ–∫–∞, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∏–≥—Ä–æ–π. "
    "–í –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã, –∫–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ –Ω–∞–ø–∏—à–µ—Ç '–Ω–∞—á–∞—Ç—å –∏–≥—Ä—É' –∏–ª–∏ '–ù–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è', –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–ø–∏—Å–∞–Ω –º–∏—Ä –∏ —Å—é–∂–µ—Ç –∏–≥—Ä—ã, –Ω–∞—á–Ω–∏ –∏–≥—Ä—É —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞, –ø—Ä–∏ —ç—Ç–æ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –¥—Ä—É–≥–æ–µ –Ω–∞—á–∞–ª–æ. "
    "–ù–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ –∏–≥—Ä–æ–∫–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–π —Å—é–∂–µ—Ç –¥–∞–ª—å—à–µ, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö –∏–≥—Ä–æ–∫–∞, –Ω–µ –æ—Ç—Å—Ç—É–ø–∞—è –æ—Ç —Å—é–∂–µ—Ç–∞. "
    "–ï—Å–ª–∏ —Ç–µ–±–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ '–Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∏–≥—Ä', —Ç–æ –æ—Ç–≤–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —É –Ω–µ–≥–æ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∏–≥—Ä, –∏ —á—Ç–æ –æ–Ω –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É. "
    "–í –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å—é–∂–µ—Ç–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–π –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞–∑–≤–∏—Ç–∏—è, –Ω—É–º–µ—Ä—É—è –∏—Ö, —Å–ø—Ä–∞—à–∏–≤–∞—è: '–ö–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Ç—ã —Å–¥–µ–ª–∞–µ—à—å?'. "
    "–¢–∞–∫–∂–µ —Ç–µ–±–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–≥—Ä–æ–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–π –µ–≥–æ –≤ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –∏ –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ 15, —Ç–æ –∑–∞–∫–æ–Ω—á–∏ –∏—Å—Ç–æ—Ä–∏—é, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–≤ –µ—ë —Ñ–∏–Ω–∞–ª, –ø—Ä–∏—á–µ–º –≤ —ç—Ç–æ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö, –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤. \n\n{context}"
)

prompt = ChatPromptTemplate.from_messages(
    [
        ("system", system_prompt),
        ("human", "{input}"),
    ]
)

question_answer_chain = create_stuff_documents_chain(llm, prompt)
rag_chain = create_retrieval_chain(retriever, question_answer_chain)

workflow = StateGraph(state_schema=MessagesState)

def call_model(state: MessagesState):
    response = llm.invoke(state["messages"])
    return {"messages": response}

workflow.add_node("model", call_model)
workflow.add_edge(START, "model")

memory = MemorySaver()
app = workflow.compile(checkpointer=memory)

def parse_response(text: str) -> tuple[str, list[str]]:
    parts = re.split(r"–ö–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Ç—ã —Å–¥–µ–ª–∞–µ—à—å\??", text, flags=re.IGNORECASE)
    main_text = parts[0].strip()
    options = []
    
    if len(parts) > 1:
        options_block = parts[1]
        option_matches = re.findall(r"\d+\.\s*(.*)", options_block)
        options = [match.strip() for match in option_matches[:3]]
    
    return main_text, options

@dp.message(CommandStart())
async def start_command(message: Message, state: FSMContext):
    await state.set_state(Reg.start)
    await message.reply(
        "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Crystals of Fate! üåü\n\n"
        "üîπ –ù–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç ‚úÖ - –ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ –Ω–æ–≤–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ\n"
        "üîπ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚ñ∂Ô∏è - –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –∏–≥—Ä–µ\n"
        "üîπ –ù–æ–≤–∞—è –∏–≥—Ä–∞ üåç - –Ω–∞—á–∞—Ç—å —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞",
        reply_markup=start_keyboard
    )

@dp.message(Reg.start)
async def start_story(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "‚ú® –ù–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç ‚úÖ":
        cursor.execute("DELETE FROM user_progress WHERE user_id = ?", (user_id,))
        conn.commit()
        new_thread_id = f"{message.chat.id}_{int(time.time())}"
        await state.update_data(thread_id=new_thread_id)
        cursor.execute("INSERT INTO user_progress (user_id, progress, story, thread_id) VALUES (?, 1, '', ?)",
                       (user_id, new_thread_id))
        conn.commit()
        await state.set_state(Reg.dialog)
        await handle_dialog(message, state)
        
    elif message.text == "üìú –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚ñ∂Ô∏è":
        cursor.execute("SELECT thread_id, progress, story FROM user_progress WHERE user_id = ?", (user_id,))
        row = cursor.fetchone()
        if row is None or row[2] == "":
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∏–≥—Ä. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É!", reply_markup=start_keyboard)
            await state.set_state(Reg.start)
        else:
            await state.update_data(thread_id=row[0], progress=row[1], story=row[2])
            await message.answer("üìú –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=options_keyboard)
            await state.set_state(Reg.dialog)
            
    elif message.text == "üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞ üåç":
        cursor.execute("DELETE FROM user_progress WHERE user_id = ?", (user_id,))
        conn.commit()
        await message.answer("üîÑ –í–∞—à–∞ —Å—Ç–∞—Ä–∞—è –∏—Å—Ç–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É!", reply_markup=start_keyboard)
        await state.set_state(Reg.start)

@dp.message(Reg.dialog)
async def handle_dialog(message: Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    current_options = data.get("current_options", [])
    
    if message.text in ["1-—ã–π –≤–∞—Ä–∏–∞–Ω—Ç", "2-–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", "3-–∏–π –≤–∞—Ä–∏–∞–Ω—Ç"]:
        option_index = int(message.text[0]) - 1
        if 0 <= option_index < len(current_options):
            user_input = current_options[option_index]
        else:
            await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=options_keyboard)
            return
    elif message.text == "üé≠ –î—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç":
        await message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–µ–π—Å—Ç–≤–∏—è:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(Reg.custom_choice)
        return
    else:
        cursor.execute("SELECT progress FROM user_progress WHERE user_id = ?", (user_id,))
        row = cursor.fetchone()
        if row and row[0] == 1:
            user_input = "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"
        else:
            await message.answer("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞", reply_markup=options_keyboard)
            return
    
    await process_user_choice(user_input, message, state)

@dp.message(Reg.custom_choice)
async def handle_custom_choice(message: Message, state: FSMContext):
    await process_user_choice(message.text, message, state)
    await state.set_state(Reg.dialog)

async def process_user_choice(user_input: str, message: Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    
    try:
        retrieved_docs = retriever.invoke(user_input)
        context = "\n".join([doc.page_content for doc in retrieved_docs])
        
        cursor.execute("SELECT progress FROM user_progress WHERE user_id = ?", (user_id,))
        progress = cursor.fetchone()[0] + 1
        
        messages = [
            SystemMessage(content=system_prompt.format(context=context)),
            HumanMessage(content=user_input)
        ] if progress == 1 else [HumanMessage(content=user_input)]
        
        config = {"configurable": {"thread_id": data["thread_id"], "progress": progress}}
        
        await asyncio.sleep(RATE_LIMIT_DELAY)
        
        loop = asyncio.get_event_loop()
        results = await loop.run_in_executor(
            None,
            lambda: app.invoke({"messages": messages}, config)
        )
        
        bot_response = results["messages"][-1].content
        
        main_text, options = parse_response(bot_response)
        
        await state.update_data(
            story=bot_response,
            current_options=options,
            progress=progress
        )
        
        cursor.execute(
            "UPDATE user_progress SET story = ?, options = ?, progress = ? WHERE user_id = ?",
            (bot_response, str(options), progress, user_id)
        )
        conn.commit()
        
        if progress >= 15:
            await message.answer(main_text, reply_markup=start_keyboard)
            await state.set_state(Reg.start)
        else:
            await message.answer(main_text)
            if options:
                await message.answer("üé≤ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=options_keyboard)
            else:
                await message.answer("‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ...", reply_markup=ReplyKeyboardRemove())
                
    except Exception as e:
        logging.error(f"Error in process_user_choice: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=start_keyboard)
        await state.set_state(Reg.start)

@dp.message(Reg.cont)
async def handle_continue(message: Message, state: FSMContext):
    user_id = message.from_user.id
    cursor.execute("SELECT thread_id, progress, story FROM user_progress WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    if row is None or row[2] == "":
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∏–≥—Ä. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é!", reply_markup=start_keyboard)
        await state.set_state(Reg.start)
    else:
        await state.update_data(thread_id=row[0], progress=row[1], story=row[2])
        await message.answer(f"üìú –í–∞—à–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è:\n{row[2]}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=options_keyboard)
        await state.set_state(Reg.dialog)

async def main():
    logging.info("Starting bot...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
