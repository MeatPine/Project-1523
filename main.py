import asyncio
import logging
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import requests
from mistralai import Mistral

api_key = "XSFzvyw9LNYEjKYPFYFhYCzerqjeAr7Y"
model = "mistral-small-latest"
bot_token = "7602719591:AAER_dkEQXD9x0O4RNnya5nzWss3RAnPqGE"

client = Mistral(api_key=api_key)
logging.basicConfig(level=logging.INFO)
bot = Bot(token=bot_token)
dp = Dispatcher()

conn = sqlite3.connect("users_data.db")
cursor = conn.cursor()

cursor.execute("""
    CREATE TABLE IF NOT EXISTS messages (
        user_id INTEGER,
        message TEXT
    )
""")
cursor.execute("""
    CREATE TABLE IF NOT EXISTS story (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        text TEXT
    )
""")
cursor.execute("""
    CREATE TABLE IF NOT EXISTS corrections (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        original TEXT,
        corrected TEXT
    )
""")
conn.commit()

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–æ–≤–µ–ª–ª–∞. –û—Ç–≤–µ—á–∞–π, –∏ —è –±—É–¥—É –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–≤–æ–∏ —Å–ª–æ–≤–∞!\n"
                         "–ö–æ–º–∞–Ω–¥—ã:\n"
                         "/history ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                         "/clear_history ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                         "/upload_story ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å —Å—é–∂–µ—Ç–æ–º\n"
                         "/delete_story ‚Äî —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—é–∂–µ—Ç\n"
                         "/correct ‚Äî –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –±–æ—Ç–∞")

@dp.message(Command("history"))
async def cmd_history(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("SELECT message FROM messages WHERE user_id = ?", (user_id,))
    history = cursor.fetchall()
    
    if history:
        history_text = "\n".join([msg[0] for msg in history])
        await message.answer(f"üìú *–¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:*\n\n{history_text}", parse_mode="Markdown")
    else:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")

@dp.message(Command("clear_history"))
async def cmd_clear_history(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("DELETE FROM messages WHERE user_id = ?", (user_id,))
    conn.commit()
    await message.answer("üóë –¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—á–∏—â–µ–Ω–∞!")

@dp.message(Command("correct"))
async def cmd_correct(message: types.Message):
    parts = message.text.split("\n", 2)
    if len(parts) < 3:
        await message.answer("–§–æ—Ä–º–∞—Ç: /correct <–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç>\n<–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç>")
        return

    original_text = parts[1]
    corrected_text = parts[2]

    cursor.execute("INSERT INTO corrections (user_id, original, corrected) VALUES (?, ?, ?)", 
                   (message.from_user.id, original_text, corrected_text))
    conn.commit()

    await message.answer("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")

@dp.message(Command("upload_story"))
async def cmd_upload_story(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ `.txt` —Ñ–∞–π–ª —Å —Å—é–∂–µ—Ç–æ–º.")

@dp.message(lambda message: message.document and message.document.mime_type == "text/plain")
async def handle_text_file(message: types.Message):
    file_id = message.document.file_id
    file = await bot.get_file(file_id)
    file_path = file.file_path
    file_url = f"https://api.telegram.org/file/bot{bot_token}/{file_path}"

    response = requests.get(file_url)
    story_text = response.text

    cursor.execute("DELETE FROM story")
    cursor.execute("INSERT INTO story (text) VALUES (?)", (story_text,))
    conn.commit()

    await message.answer("‚úÖ –°—é–∂–µ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")

@dp.message(Command("delete_story"))
async def cmd_delete_story(message: types.Message):
    cursor.execute("DELETE FROM story")
    conn.commit()
    await message.answer("‚ùå –°—é–∂–µ—Ç —É–¥–∞–ª—ë–Ω!")

@dp.message()
async def message_handler(msg: types.Message):
    user_id = msg.from_user.id
    user_message = msg.text

    cursor.execute("INSERT INTO messages (user_id, message) VALUES (?, ?)", (user_id, user_message))
    conn.commit()

    cursor.execute("SELECT message FROM messages WHERE user_id = ?", (user_id,))
    history = cursor.fetchall()
    chat_history = []
    for m in history:
        if m[0] and isinstance(m[0], str):
            chat_history.append({"role": "user", "content": m[0]})


    cursor.execute("SELECT text FROM story LIMIT 1")
    story_data = cursor.fetchone()
    if story_data:
        chat_history.insert(0, {"role": "system", "content": story_data[0]})

    chat_response = client.chat.complete(
        model=model,
        messages=chat_history
    )
    
    response_text = chat_response.choices[0].message.content

    cursor.execute("SELECT corrected FROM corrections WHERE original = ?", (response_text,))
    correction = cursor.fetchone()
    if correction:
        response_text = correction[0]

    await msg.answer(response_text, parse_mode="Markdown")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
